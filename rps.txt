rp server is running somewhere http://server

in pf: start another 'server' on port 3000
-> node	-> go (current bin)	-> start server on port 3000 of docker container (normal)
		-> start a new rp client -> open tunnel to server -> server gives random port (e.g. 65535)

in host machine: go to http://server:65535
Server sends TCP data over tunnel to client
Client forwards TCP data to localhost:3000
Client receives response from localhost:3000 and returns it to server
Server returns it to pf user



Start 

server running 												/
server listening for clients on some port C 				/


user starts server on pf 									?
pf bin starts a client 										?
client opens tunnel to server through server's port C 		/
server chooses another port U to listen for users on 		/
server writes port U to client 								/
	msg { 	
		Type: ConnectionOpen
		Data: "<port_no>"
	}
server saves U:client relationship, portToClient[U] = client

server starts listening for users on port U 				/
server waits for client to send data

client returns http://server:U to pf bin 					/ OpenTunnel() returns this
pf bin returns http://server:U to user 						?

user connects to http://server:U 							/
server accepts connection 									/
server gives Id to user, 
	users[Id] = userConnection
	userIds[userConnection] = Id
server sends ConnectionOpen msg to client portToClient[U]	
	msg {
		Type: ConnectionOpen
		Id: ???
	}
client opens a tcp connection P to protected server 			
	save userToProtectedServer[msg.Id] = P

user sends info to http://server:U (raw tcp) 				
server forwards info to related client portToClient[U]		.
	msg {
		Type: Data
		Data: "<raw_tcp_string>"
		Id: i
	}
client forwards info to server on pf (just msg.Data)	 	.
	userToProtectedServer[msg.Id].Write(msg.Data)			.
client returns response to server 							/
	msg {
		Type: Data
		Data: "<tcp_response>"
		Id: ???
	}
server returns response to user (just msg.Data)				.
	users[msg.Id].Write(msg.Data)


End

tests
/- server starts 					
/	- client open tunnel to server for protected server (ps)
/		- client stops
/		- server stops
/		- user connects to server
/			- user sends message
/			- user disconnects
/			- client stops
/			- server stops
/		- 2 users connect to same ps port
/			- u1 sends message
/			- both send message
/			- u1 disconnect
/				- u2 send message
	- 2 clients open tunnels to two different protected servers
		- 2 users connect to each ps port
			- u1 sends message
				- u2 sends message
					- u1 disconnects
						- u2 sends message
							- u2 disconnects


issue (race condition): 
user issues a connect to rps server
client stops and tells server to disconnect all users (but user has not connected yet)
server disconnects all 0 users
user's initial connection requests finishes
user is connected to the rps server

expected: user should not be connected since client stopped.
possible solutions:
	- closing the listening should stop AcceptTCP and return an error...